PROBLE:https://practice.geeksforgeeks.org/problems/count-pairs-with-given-sum5022/1#
VIDEO:https://youtu.be/ijKmiFqjzi4
//BRUTE FORCE(GETTING TLE)
TIME:O(N2)
SPACE:O(1)
class Solution{   
public:
    int getPairsCount(int arr[], int n, int k) {
        // code here
       int count =0;
       for(int i=0;i<n-1;i++){
           for(int j=i+1;j<n;j++){
               if(arr[i]+arr[j]==k){
                   count++;
               }
           }
       }
       return count;
    }
};
/*
OPTIMISATION OF TIME
TIME:O(N)
SPACE:O(N)
VIDEO EXPLANATION:https://youtu.be/5L9Jrehvoew(BEST)
*/

/* PESUDO CODE
STEP1:  FIRST WE DECLARE AN UNORDERED MAP SO THAT WE CAN ACCESS IN O(1) TIME,THEN DECLARE AN ANS VARIABLE
STEP 2:TRAVERSE THE ARRAY ,WHATEVER IS PRESENT AT THE ith INDEX FIND ITS COUNTERPART ..I MEAN ,K-ARR[I] WILL BE COUNTER OF ARR[I]..
STEP 3:IF COUNTERPART IS PRESENT IN MAP THEN INCREASE ANS BY THE FREQUENCY OF COUNTERPART IN THE MAP
STEP 4:INSERT ELEMENT AT THE ith INDEX IN THE MAP
STEP 5:RETURN ANS
*/

class Solution{   
public:
    int getPairsCount(int arr[], int n, int k) {
        // code here
     unordered_map<int,int>m;
     int ans=0;
     for(int i=0;i<n;i++){
         int val=k-arr[i];
         if(m[val]){
             ans+=m[val];
         }
         m[arr[i]]++;
     }
     return ans;
    }
};
/*
IF WE WANNA SAVE SPACE THEN OPTIMIZATION COULD BE DONE(two pointer approach used)
TIME:O(nlog(n))+O(n)=O(nlogn)
space:O(1)
video explaination:(not exact but quite similar):  https://youtu.be/4t9jv9AkVdE
editorial:  https://www.geeksforgeeks.org/count-pairs-with-given-sum-set-2/
*/

class Solution{   
public:
// Function to return the count of pairs
// from arr[] with the given sum
    int getPairsCount(int arr[], int n, int k) {
        // code here
         // To store the count of pairs
        int ans = 0;
        // Sort the given array
        sort(arr,arr+n);
         // Take two pointers
        int l=0;
        int r=n-1;
        while(l<r){
            // If sum is lesser
            if(arr[l]+arr[r]<k){
                l++;
            }
            // If sum is greater
            else if(arr[l]+arr[r]>k){
                r--;
            }
            // If sum is equal
            else{
                // Find the frequency of arr[l]
                int x=arr[l],xx=l;
                
                while (l< r and arr[l] == x)
                l++;
                // Find the frequency of arr[r]
            int y = arr[r], yy = r;
             while (r >= l and arr[r] == y)
                r--;
        // If arr[l] and arr[r] are same
            // then remove the extra number counted
        if(x==y){
            int temp = l - xx + yy - r - 1;
                ans += (temp * (temp + 1)) / 2;
        }
        else
                ans += (l - xx) * (yy - r);
            }
        }
// Return the required answer
    return ans;
    }
};

