BEST VIDEO SOLUTION: https://youtu.be/CZQGRp93K4k
problem:https://leetcode.com/problems/sliding-window-maximum/

//brute force:
//time :o(n*2)
//space :o(1)
class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
       vector<int> v;
        for(int i=0;i<=nums.size()-k;i++){
            int maxi=INT_MIN;
            for(int j=i;j<i+k;j++){
               maxi=max(maxi,nums[j]);
            }
            v.push_back(maxi);
        }
        return v;
    }
};

// optimised
/*
pseudo code(ADITYA VERMA'S FORMAT OF SLIDING WINDOW TECHNIQUE
1.set i,j
2.traverse array till size
3.do some calculation
4.if we have not hit window size j++
5.if hit window,previous calculation se ans nikalo
then past ke knot ko delete karo if possible
the i++
j++
*/
class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        //GREAT APPLICATION OF DEQUE
        //TC:O(N)+O(N)=O(N) 
        
        //o(N) FOR TRAVERSING NUMS VECTOR AND o(N) FOR POPPING OUT ELEMENTS LESS THAN INCOMING ELEMENTS(BECAUSE THEY NO MORE MATTER NOW) AND OUT OF BOUND ELEMENTS
        
        //SPACE:O(K) BECAUSE AT ANY MOMENT WE ARE STORING MAX NO OF ELEMENTS EQUAL TO WINDOW SIZE AND REST ELEMENTS WE ARE POPPING OUT
        
        deque<int>dq;
       vector<int> ans;
        int i=0,j=0;
        while(j<nums.size()){
            while(!dq.empty()&& nums[dq.back()]<nums[j]){
                dq.pop_back();
            }
            dq.push_back(j);
            if(j-i+1<k){
                j++;
            }
            else if(j-i+1==k){
                ans.push_back(nums[dq.front()]);
                if(nums[i]==nums[dq.front()]){
                    dq.pop_front();
                }
                i++;
                j++;
            }
        }
        return ans;
    }
};
